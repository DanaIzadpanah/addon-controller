//go:build ignore
// +build ignore

/*
Copyright 2022. projectsveltos.io. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/kubectl/pkg/scheme"
)

const (
	contourTemplate = `// Generated by *go generate* - DO NOT EDIT
/*
Copyright 2022. projectsveltos.io. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package contour

// Contour deployment names
var {{ .NamePrefix }}Deployments = []string{ {{range $element := .Deployments}} "{{$element}}", {{end}} }

var {{ .NamePrefix }}YAML = []byte({{- printf "%s" .YAML -}})
`

	separator = "---\n"
)

func generateContourGateway(filename, outputFilename, namePrefix string) {
	fileAbs, err := filepath.Abs(filename)
	if err != nil {
		panic(err)
	}

	content, err := ioutil.ReadFile(fileAbs)
	if err != nil {
		panic(err)
	}
	contentStr := string(content)
	contentStr = strings.ReplaceAll(contentStr, "`", "")

	contentStr = removeInvalidSection(contentStr)
	deploymentNames := getDeploymentNames(contentStr)

	contentStr = "`" + contentStr + "`"

	// Find the output.
	crd, err := os.Create(outputFilename + ".go")
	if err != nil {
		panic(err)
	}
	defer crd.Close()

	// Store file contents.
	type Info struct {
		YAML        string
		Deployments []string
		NamePrefix  string
	}
	mi := Info{
		YAML:        contentStr,
		Deployments: deploymentNames,
		NamePrefix:  namePrefix,
	}

	// Generate template.
	manifest := template.Must(template.New("contour-generate").Parse(contourTemplate))
	if err := manifest.Execute(crd, mi); err != nil {
		panic(err)
	}
}

func main() {
	contourConfigurationFile := "../contour/contour_gateway.yaml"
	generateContourGateway(contourConfigurationFile, "contour_gateway", "ContourGateway")

	contourConfigurationFile = "../contour/contour.yaml"
	generateContourGateway(contourConfigurationFile, "contour", "Contour")
}

func removeInvalidSection(content string) string {
	result := ""
	elements := strings.Split(content, separator)
	for i := range elements {
		if elements[i] == "" {
			continue
		}

		_, err := getUnstructured([]byte(elements[i]))
		if err != nil {
			continue
		}

		result += elements[i]
		result += separator
	}

	return result
}

func getDeploymentNames(content string) []string {
	deploymentNames := make([]string, 0)
	elements := strings.Split(content, separator)
	for i := range elements {
		if elements[i] == "" {
			continue
		}

		element, err := getUnstructured([]byte(elements[i]))
		if err != nil {
			panic(err)
		}

		if element.IsList() {
			continue
		}

		if element.GetKind() == "Deployment" {
			deploymentNames = append(deploymentNames, fmt.Sprintf("%s/%s", element.GetNamespace(), element.GetName()))
		}
	}

	return deploymentNames
}

func getUnstructured(object []byte) (*unstructured.Unstructured, error) {
	request := &unstructured.Unstructured{}
	universalDeserializer := scheme.Codecs.UniversalDeserializer()
	_, _, err := universalDeserializer.Decode(object, nil, request)
	if err != nil {
		return nil, fmt.Errorf("failed to decode k8s resource %.50s. Err: %w",
			string(object), err)
	}

	return request, nil
}
