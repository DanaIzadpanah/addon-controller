//go:build ignore
// +build ignore

/*
Copyright 2022. projectsveltos.io. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	appsv1 "k8s.io/api/apps/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/kubectl/pkg/scheme"
)

const (
	gatekeeperTemplate = `// Generated by *go generate* - DO NOT EDIT
/*
Copyright 2022. projectsveltos.io. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package gatekeeper

// Gatekeeper namespace name
const Namespace = {{ printf "\"%s\"" .Namespace }}

// Gatekeeper deployment names
var Deployments = []string{ {{range $element := .Deployments}} "{{$element}}", {{end}} }

const AuditDeployment = {{ printf "\"%s\"" .AuditDeployment }}

var {{ .ExportedName }}YAML = []byte({{- printf "%s" .YAML -}})
`

	separator = "---\n"
)

const auditDeploymentName = "gatekeeper-audit"

func generateGatekeeper(filename, outputFilename, exportedName string) {
	fileAbs, err := filepath.Abs(filename)
	if err != nil {
		panic(err)
	}

	content, err := ioutil.ReadFile(fileAbs)
	if err != nil {
		panic(err)
	}
	contentStr := string(content)
	contentStr = strings.ReplaceAll(contentStr, "`", "")
	checkReplicas(contentStr)

	namespaceName := getNamespaceName(contentStr)
	deploymentNames := getDeploymentNames(contentStr)
	verifyAuditDeploymentName(contentStr)

	contentStr = "`" + contentStr + "`"

	// Find the output.
	crd, err := os.Create(outputFilename + ".go")
	if err != nil {
		panic(err)
	}
	defer crd.Close()

	// Store file contents.
	type Info struct {
		YAML            string
		Namespace       string
		Deployments     []string
		AuditDeployment string
		ExportedName    string
	}
	mi := Info{
		YAML:            contentStr,
		Namespace:       namespaceName,
		Deployments:     deploymentNames,
		ExportedName:    exportedName,
		AuditDeployment: auditDeploymentName,
	}

	// Generate template.
	manifest := template.Must(template.New("gatekeeper-generate").Parse(gatekeeperTemplate))
	if err := manifest.Execute(crd, mi); err != nil {
		panic(err)
	}
}

func main() {
	gatekeeperConfigurationFile := "../gatekeeper/gatekeeper.yaml"

	generateGatekeeper(gatekeeperConfigurationFile, "gatekeeper", "Gatekeeper")
}

func checkReplicas(content string) {
	replicas := "replicas: 1"

	index := strings.Index(content, replicas)
	if index == -1 {
		panic(fmt.Errorf("did not find proper replicas set"))
	}
}

func getNamespaceName(content string) string {
	var namespaceName string
	elements := strings.Split(content, separator)
	for i := range elements {
		if elements[i] == "" {
			continue
		}

		element, err := getUnstructured([]byte(elements[i]))
		if err != nil {
			panic(err)
		}

		if element.IsList() {
			continue
		}

		if element.GetKind() == "Namespace" {
			if namespaceName != "" {
				panic(fmt.Errorf("more than one namespace found"))
			}
			namespaceName = element.GetName()
		}
	}

	return namespaceName
}

func getDeploymentNames(content string) []string {
	deploymentNames := make([]string, 0)
	elements := strings.Split(content, separator)
	for i := range elements {
		if elements[i] == "" {
			continue
		}

		element, err := getUnstructured([]byte(elements[i]))
		if err != nil {
			panic(err)
		}

		if element.IsList() {
			continue
		}

		if element.GetKind() == "Deployment" {
			deploymentNames = append(deploymentNames, element.GetName())
		}
	}

	return deploymentNames
}

func verifyAuditDeploymentName(content string) {
	found := false

	elements := strings.Split(content, separator)
	for i := range elements {
		if elements[i] == "" {
			continue
		}

		element, err := getUnstructured([]byte(elements[i]))
		if err != nil {
			panic(err)
		}

		if element.IsList() {
			continue
		}

		if element.GetKind() == "Deployment" && element.GetName() == auditDeploymentName {
			found = true

			// Verifies it contains only one container
			depl := &appsv1.Deployment{}
			err = runtime.DefaultUnstructuredConverter.FromUnstructured(element.UnstructuredContent(), depl)
			if err != nil {
				panic(err)
			}
			if len(depl.Spec.Template.Spec.Containers) != 1 {
				panic(fmt.Errorf("audit deployment has more than one container"))
			}

			break
		}
	}

	if found == false {
		panic(fmt.Errorf("did not find audit deployment"))
	}
}

func getUnstructured(object []byte) (*unstructured.Unstructured, error) {
	request := &unstructured.Unstructured{}
	universalDeserializer := scheme.Codecs.UniversalDeserializer()
	_, _, err := universalDeserializer.Decode(object, nil, request)
	if err != nil {
		return nil, fmt.Errorf("failed to decode k8s resource %.50s. Err: %w",
			string(object), err)
	}

	return request, nil
}
