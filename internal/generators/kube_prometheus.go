//go:build ignore
// +build ignore

/*
Copyright 2022. projectsveltos.io. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/kubectl/pkg/scheme"
)

const (
	prometheusTemplate = `// Generated by *go generate* - DO NOT EDIT
/*
Copyright 2022. projectsveltos.io. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package kubeprometheus

// Prometheus instance name
const PrometheusName = {{ printf "\"%s\"" .PrometheusName }}

// Prometheus service acccount name
const PrometheusServiceAccountName = {{ printf "\"%s\"" .PrometheusServiceAccountName }}

// ServiceMonitor for KubeStateMetric
var KSMServiceMonitor = []byte({{- printf "%s" .KSMServiceMonitor -}})

// Prometheus instance
var Prometheus = []byte({{- printf "%s" .Prometheus -}})

var {{ .ExportedName }}YAML = []byte({{- printf "%s" .YAML -}})
`

	separator = "---\n"
)

func generateKubePrometheus(filename, outputFilename, exportedName string) {
	fileAbs, err := filepath.Abs(filename)
	if err != nil {
		panic(err)
	}

	content, err := ioutil.ReadFile(fileAbs)
	if err != nil {
		panic(err)
	}
	contentStr := string(content)

	prometheusInstanceName, serviceAccountName := getPrometheusInstanceNameAndServiceAccount(contentStr)
	prometheusInstance := getPrometheusInstance(contentStr)
	serviceMonitor := getServiceMonitorForKubeStateMetrics(contentStr)

	contentStr = strings.ReplaceAll(contentStr, "`", "")

	contentStr = "`" + contentStr + "`"

	// Find the output.
	crd, err := os.Create(outputFilename + ".go")
	if err != nil {
		panic(err)
	}
	defer crd.Close()

	// Store file contents.
	type Info struct {
		YAML                         string
		ExportedName                 string
		PrometheusName               string
		PrometheusServiceAccountName string
		Prometheus                   string
		KSMServiceMonitor            string
	}
	mi := Info{
		YAML:                         contentStr,
		ExportedName:                 exportedName,
		PrometheusName:               prometheusInstanceName,
		PrometheusServiceAccountName: serviceAccountName,
		Prometheus:                   prometheusInstance,
		KSMServiceMonitor:            serviceMonitor,
	}

	// Generate template.
	manifest := template.Must(template.New("prometheus-generate").Parse(prometheusTemplate))
	if err := manifest.Execute(crd, mi); err != nil {
		panic(err)
	}
}

func main() {
	prometheusConfigurationFile := "../kubeprometheus/kube_prometheus.yaml"

	generateKubePrometheus(prometheusConfigurationFile, "kube_prometheus", "KubePrometheus")
}

func getPrometheusInstanceNameAndServiceAccount(content string) (string, string) {
	var prometheusInstanceName, serviceAccountName string
	elements := strings.Split(content, separator)
	for i := range elements {
		if elements[i] == "" {
			continue
		}

		element, err := getUnstructured([]byte(elements[i]))
		if err != nil {
			panic(err)
		}

		if element.IsList() {
			continue
		}

		if element.GetKind() == "Prometheus" {
			if prometheusInstanceName != "" {
				panic(fmt.Errorf("found more than one Prometheus instance"))
			}
			prometheusInstanceName = element.GetName()
			serviceAccountName = getServiceAccountName(elements[i])
		}
	}

	return prometheusInstanceName, serviceAccountName
}

func getServiceMonitorForKubeStateMetrics(content string) string {
	var serviceMonitor string
	elements := strings.Split(content, separator)
	for i := range elements {
		if elements[i] == "" {
			continue
		}

		element, err := getUnstructured([]byte(elements[i]))
		if err != nil {
			panic(err)
		}

		if element.IsList() {
			continue
		}

		if element.GetKind() == "ServiceMonitor" && element.GetName() == "kube-state-metrics" {
			serviceMonitor = elements[i]
		}
	}

	return fmt.Sprintf("`%s`", serviceMonitor)
}

func getPrometheusInstance(content string) string {
	var prometheusInstance string
	elements := strings.Split(content, separator)
	for i := range elements {
		if elements[i] == "" {
			continue
		}

		element, err := getUnstructured([]byte(elements[i]))
		if err != nil {
			panic(err)
		}

		if element.IsList() {
			continue
		}

		if element.GetKind() == "Prometheus" {
			prometheusInstance = elements[i]
		}
	}

	return fmt.Sprintf("`%s`", prometheusInstance)
}

func getUnstructured(object []byte) (*unstructured.Unstructured, error) {
	request := &unstructured.Unstructured{}
	universalDeserializer := scheme.Codecs.UniversalDeserializer()
	_, _, err := universalDeserializer.Decode(object, nil, request)
	if err != nil {
		return nil, fmt.Errorf("failed to decode k8s resource %.50s. Err: %w",
			string(object), err)
	}

	return request, nil
}

func getServiceAccountName(content string) string {
	serviceAccount := "serviceAccountName:"

	index := strings.Index(content, serviceAccount)
	if index == -1 {
		panic(fmt.Errorf("did not find ServiceAccount"))
	}

	var serviceAccountName string
	_, err := fmt.Sscanf(content[index+len(serviceAccount):], "%s", &serviceAccountName)
	if err != nil {
		panic(err)
	}

	return serviceAccountName
}
