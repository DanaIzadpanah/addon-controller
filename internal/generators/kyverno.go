//go:build ignore
// +build ignore

/*
Copyright 2022. projectsveltos.io. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const (
	kyvernoTemplate = `// Generated by *go generate* - DO NOT EDIT
/*
Copyright 2022. projectsveltos.io. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package kyverno

// Kyverno namespace name
const Namespace = {{ printf "\"%s\"" .Namespace }}

// Kyverno deployment name
const Deployment = {{ printf "\"%s\"" .Deployment }}

var {{ .ExportedName }}YAML = []byte({{- printf "%s" .YAML -}})
`
)

func generateKyverno(filename, outputFilename, exportedName string) {
	fileAbs, err := filepath.Abs(filename)
	if err != nil {
		panic(err)
	}

	content, err := ioutil.ReadFile(fileAbs)
	if err != nil {
		panic(err)
	}
	contentStr := string(content)
	contentStr = strings.ReplaceAll(contentStr, "`", "")
	checkReplicas(contentStr)

	namespaceName := getNamespaceName(contentStr)
	deploymentName := getDeploymentName(contentStr)

	contentStr = "`" + contentStr + "`"

	// Find the output.
	crd, err := os.Create(outputFilename + ".go")
	if err != nil {
		panic(err)
	}
	defer crd.Close()

	// Store file contents.
	type Info struct {
		YAML         string
		Namespace    string
		Deployment   string
		ExportedName string
	}
	mi := Info{
		YAML:         contentStr,
		Namespace:    namespaceName,
		Deployment:   deploymentName,
		ExportedName: exportedName,
	}

	// Generate template.
	manifest := template.Must(template.New("kyverno-generate").Parse(kyvernoTemplate))
	if err := manifest.Execute(crd, mi); err != nil {
		panic(err)
	}
}

func main() {
	kyvernoConfigurationFile := "../kyverno/kyverno.yaml"

	generateKyverno(kyvernoConfigurationFile, "kyverno", "Kyverno")
}

func checkReplicas(content string) {
	replicas := "replicas: 1"

	index := strings.Index(content, replicas)
	if index == -1 {
		panic(fmt.Errorf("did not find proper replicas set"))
	}
}

func getNamespaceName(content string) string {
	ns := getKindSection(content, "Namespace")
	name := "name:"

	index := strings.Index(ns, name)
	if index == -1 {
		panic(fmt.Errorf("did not find Namespace name"))
	}

	var namespaceName string
	_, err := fmt.Sscanf(ns[index+len(name):], "%s", &namespaceName)
	if err != nil {
		panic(err)
	}
	return namespaceName
}

func getDeploymentName(content string) string {
	ns := getKindSection(content, "Deployment")
	name := "name:"

	index := strings.Index(ns, name)
	if index == -1 {
		panic(fmt.Errorf("did not find Deployment name"))
	}

	var deploymentName string
	_, err := fmt.Sscanf(ns[index+len(name):], "%s", &deploymentName)
	if err != nil {
		panic(err)
	}
	return deploymentName
}

func getKindSection(content, kind string) string {
	section := "kind: " + kind
	newContent := ""
	s := bufio.NewScanner(strings.NewReader(content))
	copy := false
	for s.Scan() {
		read_line := s.Text()
		if strings.Contains(read_line, section) {
			copy = true
		}

		if copy {
			newContent += read_line + "\n"
			if read_line == "---" {
				return newContent
			}
		}
	}

	return newContent
}
